{"version":3,"file":"./dist/bundle.js","mappings":";;;UAAA;UACA;;;;;WCDA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;ACNA;;AAEA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;;AAEH;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEO;AACP;AACA,kBAAkB,wBAAwB;AAC1C;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,sCAAsC,eAAe;AACrD;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA,6BAA6B,sBAAsB;AACnD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA,oDAAoD,mBAAmB,gCAAgC;AACvG;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,KAAK;;AAEL,IAAI;AACJ;AACA;AACA","sources":["webpack://TS_Snippets/webpack/bootstrap","webpack://TS_Snippets/webpack/runtime/define property getters","webpack://TS_Snippets/webpack/runtime/hasOwnProperty shorthand","webpack://TS_Snippets/webpack/runtime/make namespace object","webpack://TS_Snippets/./src/ts-snippets/ts-snippets.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const snippets = [];\n\nconst snippetsContainer = document.getElementById('snippets-container');\nconst newSnippetButton = document.getElementById('newSnippet');\nconst runSnippetButton = document.getElementById('runSnippet');\nlet editor;\nlet activeSnippetIndex = null;\n\nexport function initializeMonaco() {\n  console.log('Initializing Monaco Editor');\n  editor = monaco.editor.create(document.getElementById('editor'), {\n    value: '',\n    language: 'typescript',\n    theme: 'vs-dark',\n  });\n\n  simulateEscapeKeyPress();\n\n  // Load saved snippets from storage\n  chrome.storage.local.get(['tsSnippets'], function(result) {\n    const loadedSnippets = result.tsSnippets || [];\n    loadedSnippets.forEach((snippet, index) => {\n      snippets.push(snippet);\n      renderSnippet(index);\n    });\n  });\n\n  newSnippetButton.addEventListener('click', addSnippet);\n\n  runSnippetButton.addEventListener('click', () => {\n    const snippetContent = editor.getValue();\n    if (snippetContent.trim()) {\n      runSnippet(snippetContent);\n    }\n  });\n\n  // Add event listener for Command + Enter (Mac) or Ctrl + Enter (Windows/Linux)\n  editor.addCommand(monaco.KeyMod.CtrlCmd | monaco.KeyCode.Enter, function() {\n    const snippetContent = editor.getValue();\n    if (snippetContent.trim()) {\n      runSnippet(snippetContent);\n    }\n  });\n\n  // Automatically save the content of the editor when it changes\n  editor.onDidChangeModelContent(() => {\n    if (activeSnippetIndex !== null) {\n      snippets[activeSnippetIndex].content = editor.getValue();\n      saveSnippets();\n    }\n  });\n}\n\nexport function addSnippet() {\n  const snippetNum = snippets.length;\n  snippets.push({ title: '', content: '' });\n  renderSnippet(snippetNum);\n  saveSnippets();\n}\n\nfunction renderSnippet(snippetNum) {\n  const snippet = snippets[snippetNum];\n  const snippetRow = document.createElement('div');\n  snippetRow.classList.add('snippet');\n\n  const titleInput = document.createElement('input');\n  titleInput.type = 'text';\n  titleInput.placeholder = `Snippet ${snippetNum + 1}`;\n  titleInput.value = snippet.title;\n  titleInput.classList.add('snippet-title-input');\n  titleInput.addEventListener('change', () => {\n    snippets[snippetNum].title = titleInput.value;\n    saveSnippets();\n  });\n\n  titleInput.addEventListener('click', () => {\n    if (activeSnippetIndex !== null) {\n      snippets[activeSnippetIndex].content = editor.getValue();\n    }\n    activeSnippetIndex = snippetNum;\n    editor.setValue(snippet.content);\n  });\n\n  const deleteBtn = document.createElement('button');\n  deleteBtn.classList.add('snippet-delete-button');\n  deleteBtn.innerHTML = '<i class=\"fa-solid fa-trash\"></i>';\n  deleteBtn.addEventListener('click', () => {\n    deleteSnippet(snippetNum);\n  });\n\n  snippetRow.appendChild(titleInput);\n  snippetRow.appendChild(deleteBtn);\n  snippetsContainer.appendChild(snippetRow);\n}\n\nfunction deleteSnippet(snippetNum) {\n  snippets.splice(snippetNum, 1);\n  if (activeSnippetIndex === snippetNum) {\n    editor.setValue('');\n    activeSnippetIndex = null;\n  } else if (activeSnippetIndex > snippetNum) {\n    activeSnippetIndex -= 1;\n  }\n  saveSnippets();\n  renderSnippets();\n}\n\nfunction renderSnippets() {\n  snippetsContainer.innerHTML = '';\n  snippets.forEach((_, snippetNum) => {\n    renderSnippet(snippetNum);\n  });\n}\n\nfunction saveSnippets() {\n  chrome.storage.local.set({ tsSnippets: snippets });\n}\n\nfunction simulateEscapeKeyPress() {\n  const event = new KeyboardEvent('keydown', {\n    key: 'Escape',\n    keyCode: 27,\n    code: 'Escape',\n    which: 27,\n    bubbles: true,\n    cancelable: true,\n    composed: true,\n  });\n\n  document.dispatchEvent(event);\n}\n\nfunction runSnippet(content) {\n  try {\n    const jsContent = ts.transpileModule(content, { compilerOptions: { module: ts.ModuleKind.ESNext } }).outputText;\n  \n    console.log(\"Compiled JavaScript:\", jsContent);\n  \n    chrome.devtools.inspectedWindow.eval(jsContent, function(result, isException) {\n      if (isException) {\n        console.error(\"Error running the snippet:\", result);\n      } else {\n        console.log(\"Snippet ran successfully:\", result);\n      }\n    });\n\n  } catch(error) {\n    console.log(\"Are you missing a log statement? ðŸ¤”\");\n  }\n}\n"],"names":[],"sourceRoot":""}