{"version":3,"file":"bundle.js","mappings":";;;UAAA;UACA;;;;;WCDA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;ACNA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA,+BAA+B,sBAAsB;AACrD;AACA;AACA,KAAK;AACL,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,+BAA+B,sBAAsB;AACrD;AACA,KAAK;AACL,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;;AAEA;AACA,kDAAkD,mBAAmB,gCAAgC;;AAErG;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;AACH","sources":["webpack://TS_Snippets/webpack/bootstrap","webpack://TS_Snippets/webpack/runtime/define property getters","webpack://TS_Snippets/webpack/runtime/hasOwnProperty shorthand","webpack://TS_Snippets/webpack/runtime/make namespace object","webpack://TS_Snippets/./ts-snippets.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const snippetsContainer = document.getElementById('snippets');\nconst addSnippetButton = document.getElementById('addSnippet');\nconst runSnippetButton = document.getElementById('runSnippet');\nlet editor;\n\nexport function initializeMonaco() {\n  console.log('Initializing Monaco Editor');\n  editor = monaco.editor.create(document.getElementById('editor'), {\n    value: '',\n    language: 'typescript',\n    theme: 'vs-dark',\n  });\n\n  // Load saved snippets from storage\n  chrome.storage.local.get(['tsSnippets'], function(result) {\n    const snippets = result.tsSnippets || [];\n    snippets.forEach((snippet, index) => {\n      addSnippetToUI(snippet, index);\n    });\n  });\n\n  addSnippetButton.addEventListener('click', () => {\n    const snippetContent = editor.getValue();\n    if (snippetContent.trim()) {\n      saveSnippet(snippetContent);\n    }\n  });\n\n  runSnippetButton.addEventListener('click', () => {\n    const snippetContent = editor.getValue();\n    if (snippetContent.trim()) {\n      runSnippet(snippetContent);\n    }\n  });\n}\n\nfunction saveSnippet(content) {\n  chrome.storage.local.get(['tsSnippets'], function(result) {\n    const snippets = result.tsSnippets || [];\n    snippets.push(content);\n    chrome.storage.local.set({ tsSnippets: snippets }, function() {\n      addSnippetToUI(content, snippets.length - 1);\n      editor.setValue('');\n    });\n  });\n}\n\nfunction addSnippetToUI(content, index) {\n  const snippetDiv = document.createElement('div');\n  snippetDiv.classList.add('snippet');\n  snippetDiv.innerText = content;\n  snippetDiv.dataset.index = index;\n\n  const deleteButton = document.createElement('button');\n  deleteButton.innerText = 'Delete';\n  deleteButton.addEventListener('click', () => {\n    deleteSnippet(index);\n  });\n\n  snippetDiv.appendChild(deleteButton);\n  snippetsContainer.appendChild(snippetDiv);\n}\n\nfunction deleteSnippet(index) {\n  chrome.storage.local.get(['tsSnippets'], function(result) {\n    const snippets = result.tsSnippets || [];\n    snippets.splice(index, 1);\n    chrome.storage.local.set({ tsSnippets: snippets }, function() {\n      loadSnippets();\n    });\n  });\n}\n\nfunction loadSnippets() {\n  snippetsContainer.innerHTML = '';\n  chrome.storage.local.get(['tsSnippets'], function(result) {\n    const snippets = result.tsSnippets || [];\n    snippets.forEach((snippet, index) => {\n      addSnippetToUI(snippet, index);\n    });\n  });\n}\n\nfunction runSnippet(content) {\n  const jsContent = ts.transpileModule(content, { compilerOptions: { module: ts.ModuleKind.ESNext } }).outputText;\n\n  console.log(\"Compiled JavaScript:\", jsContent);\n\n  chrome.devtools.inspectedWindow.eval(jsContent, function(result, isException) {\n    if (isException) {\n      console.error(\"Error running the snippet:\", result);\n    } else {\n      console.log(\"Snippet ran successfully:\", result);\n    }\n  });\n}\n"],"names":[],"sourceRoot":""}